igv_jar = "/home/rmorin/analysis/manta/bin/IGV_Linux_2.8.0/lib/igv.jar"
#ideally these won't be necessary to set if we use IGV release with bundled Java
#export JAVA_HOME="/home/rmorin/analysis/manta/bin/IGV_Linux_2.8.0/jdk-11"
#export JAVA_LIB="--module-path="$JAVA_HOME/lib"
#export PATH=$PATH:$JAVA_HOME/bin
BED_DIR = "temp_bedpe"
BATCH_DIR = "temp_igv"
BAM_DIR = "bam/renamed"
IGV_BIN = "bin/IGV_Linux_2.7.2/igv.sh"
SNAPSHOT_DIR = "out/03-snapshot"

#example with fewer SVs:
# YH946285Y01
# 65033246891

rule all:
    input:
        f"{BATCH_DIR}/""YH946285Y01_L16_1-650332468916_L1.D702_504_1.igv.batch",
        f"{BATCH_DIR}/""YH946285Y01_L16_1-650332468916_L1.D702_504_1.igv.snapshot_complete",
        #f"{BATCH_DIR}/""YJ286090Y04_L24_1-680041183216_L1.D709_508_1.igv.batch",
        #f"{BAM_DIR}/"""YJ286090Y04_L24_1-680041183216_L1.D709_508_1.igv.snapshot_complete"

# create IGV batch script for every row in a bedpe file
# The snapshots will be named after the sample and both regions being shown
# the pad parameter affects how much context on either side of the breakpoint is shown
rule screenshot_config:
    input:
        tbam=f"{BAM_DIR}/""{tumour}.coord.bam",
	tbai=f"{BAM_DIR}/""{tumour}.coord.bai",
        nbam=f"{BAM_DIR}/""{normal}.coord.bam",
        nbai=f"{BAM_DIR}/""{normal}.coord.bai",
	bedpe=f"{BED_DIR}/""{tumour}-{normal}.bedpe"
    output: batch=f"{BATCH_DIR}/""{tumour}-{normal}.igv.batch"
    params:filename=f"{BATCH_DIR}/""{tumour}-{normal}-", pad=200, dir=SNAPSHOT_DIR
    run:
        import os.path
        batch_template = """load {input.tbam}
load {input.nbam}
preference SAM.SHOW_CENTER_LINE false
maxPanelHeight 400
snapshotDirectory {params.dir}
genome hg38
goto {region1} {region2}
sort
collapse
snapshot {filename}{region1}-{region2}.png
new

"""
        
        with open(input.bedpe) as call_file:
            for line in call_file:
                if line.startswith("#CHROM"):
                    pass
                else:
                    columns = line.split("\t")
		    region1 = "{}:{}-{}".format(columns[0],int(columns[1])-params.pad,int(columns[2])+params.pad)
                    region2 = "{}:{}-{}".format(columns[3],int(columns[4])-params.pad,int(columns[5])+params.pad)
        	    directory = os.path.dirname(input.tbam)
        	    filename = os.path.basename(params.filename)
        	    with open(output.batch, 'a') as batchfile:
            	        batchfile.write(batch_template.format(**locals()))
        batchfile = open(output.batch,'a')
        batchfile.write("exit")

        
#still untested. Some versions do not work well (or at all) with this method, so it is an important consideration
#rule igv_download:
#    output: "igv.jar"
#    params: runtime="600", memory="1G"
#    shell: "https://data.broadinstitute.org/igv/projects/downloads/2.7/IGV_Linux_2.7.2.zip > IGV_Linux_2.7.2.zip; unzip IGV_Linux_2.7.2.zip"

rule igv_screenshot:
    input: batchfile=f"{BATCH_DIR}/""{tumour}-{normal}.igv.batch"
    output: f"{BATCH_DIR}/""{tumour}-{normal}.igv.snapshot_complete"
    params: memory="4G"
    #shell: 'xvfb-run --auto-servernum --server-args="-screen 0 3200x2400x24" java -Xmx4000m -jar {input.igv} -b {input.batchfile} || true'
    shell:
        'xvfb-run --auto-servernum {IGV_BIN} -b {input.batchfile} && touch {output}'
