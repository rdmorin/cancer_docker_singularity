#using a bedpe file as input, generate png screenshots of both ends of putative breakpoints using IGV 
#download and install IGV version that works well with this approach
#

#path and configuration parameters for IGV
IGV_JAR = "bin/IGV_Linux_2.7.2/lib/igv.jar"
IGV_BIN = "bin/IGV_Linux_2.7.2/igv.sh"
IGV_PANEL_HEIGHT = 500
PADDING = 300

#for display preferences that can be configured in IGV, manually open IGV and set the desired preferences
# or edit the prefs.properties file in ~/igv/

BED_DIR = "data/bedpe"
BATCH_DIR = "results/igv"
BAM_DIR = "data/genome_bams"

SNAPSHOT_DIR = "out/01-snapshot"

wildcard_constraints:
    tumour="\w\w\w\w\w-\d\d-\d\d-\d\d\d\d\d-\w\w\w-\w\w\w",
    normal="\w\w\w\w\w-\d\d-\d\d-\d\d\d\d\d-\w\w\w-\w\w\w"
#BLGSP-71-30-00637-01A-01E

rule all:
    input:
        "bin/IGV_Linux_2.7.2/lib/igv.jar",
        f"{BATCH_DIR}/""BLGSP-71-30-00637-01A-01E-BLGSP-71-30-00682-10A-01D.igv.snapshot_complete"

# create IGV batch script for every row in a bedpe file
# The snapshots will be named after the sample and both regions being shown
# the pad parameter affects how much context on either side of the breakpoint is shown
rule screenshot_config:
    input:
        tbam=f"{BAM_DIR}/""{tumour}.bam",
	tbai=f"{BAM_DIR}/""{tumour}.bam.bai",
        nbam=f"{BAM_DIR}/""{normal}.bam",
        nbai=f"{BAM_DIR}/""{normal}.bam.bai",
	bedpe=f"{BED_DIR}/""{tumour}-{normal}.bedpe"
    output: batch=f"{BATCH_DIR}/""{tumour}-{normal}.igv.batch"
    params:filename=f"{BATCH_DIR}/""{tumour}-{normal}-", pad=PADDING, dir=SNAPSHOT_DIR
    run:
        import os.path
        batch_template = """load {input.tbam}
load {input.nbam}
maxPanelHeight 400
snapshotDirectory {params.dir}
genome hg38
goto {region1} {region2}
sort
collapse
snapshot {filename}{region1}-{region2}.png
new

"""
        #TO DO: 
        # -allow user to limit to SVs meeting specific criteria. Some sanity check for massive bedpe files???
        # -optionally skip any existing PNG files and only make a batch file for missing pngs so the process can pick up where it left off
        # -
        with open(input.bedpe) as call_file:
            for line in call_file:
                if line.startswith("#CHROM"):
                    pass
                else:
                    columns = line.split("\t")
		    region1 = "{}:{}-{}".format(columns[0],int(columns[1])-params.pad,int(columns[2])+params.pad)
                    region2 = "{}:{}-{}".format(columns[3],int(columns[4])-params.pad,int(columns[5])+params.pad)
        	    directory = os.path.dirname(input.tbam)
        	    filename = os.path.basename(params.filename)
        	    with open(output.batch, 'a') as batchfile:
            	        batchfile.write(batch_template.format(**locals()))
        batchfile = open(output.batch,'a')
        batchfile.write("exit")

        
#automatically install the version that works consistently with large batch scripts
rule igv_download:
    output: f"{IGV_JAR}"
    params: runtime="600", memory="1G"
    shell:
        "curl https://data.broadinstitute.org/igv/projects/downloads/2.7/IGV_Linux_2.7.2.zip > bin/IGV_Linux_2.7.2.zip && "
        "unzip -d bin bin/IGV_Linux_2.7.2.zip"

rule igv_screenshot:
    input: batchfile=f"{BATCH_DIR}/""{tumour}-{normal}.igv.batch"
    output: f"{BATCH_DIR}/""{tumour}-{normal}.igv.snapshot_complete"
    params:
        igv_script=f"{IGV_BIN}"
    #shell: 'xvfb-run --auto-servernum --server-args="-screen 0 3200x2400x24" java -Xmx4000m -jar {input.igv} -b {input.batchfile} || true'
    shell:
        'xvfb-run --auto-servernum {params.igv_script} -b {input.batchfile} && touch {output}'